---
title: "Plotting a barplot using ggplotly (plotly library)"
output: 
  html_document:
    toc: true
    toc_float: true
---


```{css, echo = FALSE}
h1, h2, h3, h4 {text-align: center;}
h1  {color:#FFFAF0;
    background-color: #708090; 
    padding: 20px;
    font-weight:bold;}
h4 {background-color: #A52A2A;
    color:#FFFAF0;
    padding: 12px}
```

## Barplot using ggplotly

<p>The following function was designed to create barplots that can be dynamically displayed on a webpage.
The code is largely similar to that discussed [here](Plotting_file.html) and has a similar purpose, so I won't discuss it again here. In this case, however, no image is saved, as the code is designed to display the barplot on a webpage. </p>

<p>As in the link above, I'm going to work with the fake_data dataframe and, again, I'm just going to look at the column for Age.</p>


```{r echo=TRUE}
fake_data <- data.frame("X.1.What.Is.Your.Age?" = c("26-30", "26-30", "26-30", "31-35", "31-35", "36-40", "36-40", "36-40", "41-45", "46-50"), "X.2.What.Is.Your.Occupation?" = c("Magician", "Swamp Monster", "Magician", "Magician", "Doctor", "Doctor", "Accountant", "Accountant", "Magician", "Cleaner"))  
```
```{r}
print(fake_data)
```
```{r echo=TRUE, message=FALSE}
library(ggplot2)
library(dplyr)
library(ellipsis)
library(plotly)
```
```{r echo=TRUE, warning=FALSE}
plot_column <- function(data, column, legend.label = quo(column)){
  ###This function requires the following packages: dplyr, ggplot2 and plotly.
  
  ## enquo captures expressions that you supply, in this case the column name.
  column <- enquo(column)
  
  ##dplyr is used to find percentages to plot on the y-axis 
  data2 <- data %>% 
    ##!! unquotes
    group_by(!!column) %>% 
    count() %>% 
    ungroup() %>% 
    mutate(percent=ceiling(100*(`n`/sum(`n`)))) %>%
    mutate(column := as.factor(!!column)) %>% 
    select(column, percent, `n`) %>% 
    
  ##Prints the updated data, including count and percentage
  print(data2)
  
  ##The plot is created with the code below
  ##text = paste() lets you add more information to the plot. In this case I want to add the number of participants who provided a particular response (`n`).
  plot_nm <- ggplot(data2, aes(x = column, fill = column,  text = paste("number: ", `n`))) + geom_col(aes(y = percent)) + 
    theme_classic() + theme(legend.position = "none") + xlab(legend.label) + ylab("Percent")
  
  #Finally, the line below call ggplotly to produce the barplot
  ggplotly(plot_nm, tooltip = c("percent", "text")) 
}
```
<center>
```{r, warning=FALSE}
plot_column(fake_data, column = X.1.What.Is.Your.Age., legend.label = "Age")
```
</center>
